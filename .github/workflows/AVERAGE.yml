name: Finds Averages Of Benchmarks

on:
  push:

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  BENCHMARK_BRANCH: 'make-file-build-system' # The branch inside the benchmark repo that has the script to run all benchmarks.
  PAT: ${{ secrets.SIMENGUOB_PAT }}

jobs:
  AVERAGE:
    strategy:
      fail-fast: false
      matrix:

        benchmarks: [{path: "simeng-benchmarks/binaries/CloverLeaf/openmp",
                      name: "cloverleaf_gcc10.3.0_armv8.4+sve",
                      datafile: "simeng-benchmarks/Data_Files/CloverLeaf"},

                     {path: "simeng-benchmarks/binaries/miniBUDE/openmp",
                      name: "minibude_gcc10.3.0_armv8.4+sve",
                      datafile: "simeng-benchmarks/Data_Files/miniBUDE/bm1"},

                     {path: "simeng-benchmarks/binaries/STREAM",
                      name: "stream_gcc10.3.0_armv8.4+sve",
                      datafile: ""},

                     {path: "simeng-benchmarks/binaries/TeaLeaf/3d",
                      name: "tealeaf_gcc10.3.0_armv8.4+sve",
                      datafile: "simeng-benchmarks/Data_Files/TeaLeaf/3d"}] 
        
    runs-on: ubuntu-latest

    steps:
      - name: info
        shell: bash
        run: |
          echo ${{ github.workspace }}
          echo ${{ matrix.benchmarks.path }}
          echo ${{ matrix.benchmarks.name }}
          echo ${{ matrix.benchmarks.datafile }}
      #######################################
      # Clone SimEng fork
      #######################################
      - name: checkout v4
        uses: actions/checkout@v4
      
      - name: install deps
        shell: bash
        run: |
          sudo apt-get -y install gcc-10 g++-10 pip
      #######################################
      # Build SimEng without llvm or ninja
      #######################################
      - name: Build SimEng
        shell: bash
        run: |
          pip install pyparsing
          sudo cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DSIMENG_ENABLE_TESTS=ON -DSIMENG_OPTIMIZE=ON -DCMAKE_C_COMPILER=/usr/bin/gcc-10 -DCMAKE_CXX_COMPILER=/usr/bin/g++-10

          sudo cmake --build build -j $(nproc)

          sudo cmake --build build --target install

          echo "GCC_DIR=/usr/bin/gcc-10" >> $GITHUB_ENV
          echo "CPP_DIR=/usr/bin/g++-10" >> $GITHUB_ENV

      #######################################
      # Checkout simeng-benchmark repository
      #######################################
      - name: checking out benchmark repository
        uses: actions/checkout@v4
        with:
          repository: UoB-HPC/simeng-benchmarks
          ref: makefile-build-system
          token: ${{ env.PAT }}
          path: simeng-benchmarks

      #######################################
      # Run benchmark averaging
      #######################################
      - name: Run benchmark averaging script
        shell: bash
        run: |
          benchmark_path=${{ matrix.benchmarks.path }}
          benchmark_name=${{ matrix.benchmarks.name }}
          datafile_path=${{ matrix.benchmarks.datafile }}

          output_file="benchmark_output.txt"
          total_time=0
          runs=100

          cd "${{ github.workspace }}/$benchmark_path"

          # Loop to run the benchmark 10 times
          for (( i=1; i<=runs; i++ ))
          do  
              # Run the benchmark and redirect output to a file
              if [ $datafile_path ]; then
                  sudo simeng "${{ github.workspace }}/configs/a64fx.yaml" $benchmark_name -n 64 -i 1 --deck "${{ github.workspace }}/$datafile_path"  > "$output_file"
              else
                  sudo simeng "${{ github.workspace }}/configs/a64fx.yaml" $benchmark_name  > "$output_file"
              fi

              # Extract the time in milliseconds from the output
              current_time=$(grep 'ticks in' "$output_file" | awk '{print substr($6, 1, length($6)-2)}')
              
              # Add the extracted time to the total time
              total_time=$(echo "$total_time + $current_time" | bc)
              
              echo "Run $i: $current_time ms"
          done

          # Calculate the average time
          average_time=$(echo "scale=2; $total_time / $runs" | bc)

          echo "Average time over $runs runs: $average_time ms"

          # Clean up the output file
          sudo rm "$output_file"
      